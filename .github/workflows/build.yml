name: Build Wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11.9'
  CIBW_VERSION: '2.21.3'
  CIBW_BUILD: 'cp311-*'
  CIBW_SKIP: '*-musllinux_*'
  CIBW_BUILD_VERBOSITY: 1
  CIBW_BUILD_FRONTEND: 'build[uv]'

jobs:
  build_wheels_macos:
    name: Build macOS wheels (${{ matrix.arch }})
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel[uv]==${{ env.CIBW_VERSION }}

      - name: Build wheels
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-${{ matrix.arch }}-cp311
          path: dist/*.whl

  build_wheels_linux:
    name: Build Linux wheels (${{ matrix.arch.name }})
    runs-on: ${{ matrix.arch.runner }}
    strategy:
      matrix:
        arch:
          - name: aarch64
            runner: ubuntu-24.04-arm
          - name: native
            runner: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel[uv]==${{ env.CIBW_VERSION }}

      - name: Build wheels
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.arch.name == 'aarch64' && 'aarch64' || 'auto' }}
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Upload Linux wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-${{ matrix.arch.name }}-cp311
          path: dist/*.whl

  build_wheels_windows:
    name: Build Windows wheels
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel[uv]==${{ env.CIBW_VERSION }}

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Upload Windows wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-cp311
          path: dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade build

      - name: Build sdist
        run: |
          python -m build -s

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: pypi-sdist
          path: dist/*.tar.gz

  collect_artifacts:
    name: Collect all wheels and sdist
    needs: [build_wheels_macos, build_wheels_linux, build_wheels_windows, build_sdist]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          pattern: '*'
          merge-multiple: false

      - name: Prepare distribution directory
        run: |
          mkdir -p dist
          find all-artifacts -name "*.whl" -exec cp {} dist/ \;
          find all-artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/

      - name: Upload combined distributions
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/*

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs: [collect_artifacts]
    runs-on: ubuntu-latest

    environment:
      name: publish
      url: https://test.pypi.org/p/rsqlite

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
