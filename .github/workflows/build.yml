name: Build Wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        python-version: ['3.11']
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-13
            platform: macos

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Build wheel (Linux/Windows)
        if: matrix.platform != 'macos'
        run: |
          uv build --wheel

      - name: Build x86_64 wheel (macOS)
        if: matrix.platform == 'macos'
        env:
          ARCHFLAGS: "-arch x86_64"
          _PYTHON_HOST_PLATFORM: "macosx-10.9-x86_64"
        run: |
          uv build --wheel
          mkdir -p dist-x86_64
          mv dist/*.whl dist-x86_64/

      - name: Build arm64 wheel (macOS)
        if: matrix.platform == 'macos'
        env:
          ARCHFLAGS: "-arch arm64"
          _PYTHON_HOST_PLATFORM: "macosx-11.0-arm64"
        run: |
          uv build --wheel
          mkdir -p dist-arm64
          mv dist/*.whl dist-arm64/

      - name: Create universal2 wheel (macOS)
        if: matrix.platform == 'macos'
        run: |
          python -m pip install delocate wheel
          
          # Extract wheels
          cd dist-x86_64 && unzip -q *.whl && cd ..
          cd dist-arm64 && unzip -q *.whl && cd ..
          
          # Find the .so file
          SO_FILE=$(find dist-x86_64 -name "*.so" | head -1 | xargs basename)
          SO_DIR=$(find dist-x86_64 -name "*.so" | head -1 | xargs dirname | xargs basename)
          
          # Create universal binary
          lipo -create -output "$SO_DIR/$SO_FILE" \
               "dist-x86_64/$SO_DIR/$SO_FILE" \
               "dist-arm64/$SO_DIR/$SO_FILE"
          
          # Get wheel name for universal2
          WHEEL_NAME=$(ls dist-x86_64/*.whl | head -1 | xargs basename | sed 's/x86_64/universal2/g')
          
          # Copy x86_64 structure (metadata is the same)
          cp -r dist-x86_64/rsqlite* .
          cp -r dist-x86_64/*.dist-info .
          
          # Create new wheel with universal binary
          python -m wheel pack . --dest-dir dist --build-number ""
          
          # Rename to universal2
          mv dist/*.whl "dist/${WHEEL_NAME}"
          
          # Clean up temporary files
          rm -rf rsqlite* *.dist-info dist-x86_64 dist-arm64

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.python-version }}
          path: dist/*.whl

  collect-artifacts:
    name: Collect all wheels
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels
          pattern: wheels-*
          merge-multiple: true

      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: all-wheels/*.whl

      - name: List all wheels
        run: |
          echo "Built wheels:"
          ls -la all-wheels/